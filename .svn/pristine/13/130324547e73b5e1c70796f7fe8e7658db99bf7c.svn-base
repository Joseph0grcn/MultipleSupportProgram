using System;
using System.Collections.Generic;
using System.Data.Sql;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Common;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using ComboBox = System.Windows.Forms.ComboBox;
using log4net.Repository.Hierarchy;

namespace MultipleSupportProgram.Model
{
    public class DatabaseProcess
    {
        public log4net.ILog logger = log4net.LogManager.GetLogger("DatabaseProcess");
        public string GetConString(Boolean windowsAuthentication, string server, string username, string password, string database)
        {
            string ConString = "";
            if (windowsAuthentication)
            {
                ConString = "Server=" + server + ";Database=" + database + ";Trusted_Connection=True;";
            }
            else
            {
                ConString = @"Server=" + server + ";Initial Catalog=" + database + ";Integrated Security=SSPI;User ID=" + username + ";Password=" + password + ";";
            }
            return ConString;
        }


        public void ConnectionTest(Boolean windowsAuthentication, string server, string username, string password, string database)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(GetConString(windowsAuthentication, server, username, password, database)))
                {
                    con.Open();
                    logger.Debug("Test Başarılı.");
                    MessageBox.Show("Test Başarılı.", "BİLGİ", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    con.Close();
                }
            }
            catch (Exception ex)
            {
                logger.Error("HATA Bağlantı kurulamadı! : " + ex.Message + "");
                MessageBox.Show("HATA Bağlantı kurulamadı : " + ex.Message + "", "BİLGİ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void GetSQLServerList(ComboBox sqlServerList)
        {
            try
            {
                DataTable dt = SqlDataSourceEnumerator.Instance.GetDataSources();
                foreach (DataRow dr in dt.Rows)
                {
                    sqlServerList.Items.Add(string.Concat(dr["ServerName"], "\\", dr["InstanceName"]));
                }
                logger.Debug("SQL server listeleme işlemi başarılı!");
            }
            catch (Exception ex)
            {
                logger.Error("HATA SQL server listeleme işlemi başarısız! :" + ex.Message + "");
                MessageBox.Show("HATA SQL server listeleme işlemi başarısız! : " + ex.Message + "", "BİLGİ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }

        public void FindDbUsers(ComboBox cbxDbUsers, string getConString)
        {
            try
            {
                SqlConnection connect = new SqlConnection(getConString);
                connect.Open();
                SqlCommand cmd = new SqlCommand("SELECT suser_sname(owner_sid) as 'Owner', state_desc, * from sys.databases", connect);
                SqlDataReader DR = cmd.ExecuteReader();
                while (DR.Read())
                {
                    cbxDbUsers.Items.Add(DR[0]);
                }
                for (int i = 0; i < cbxDbUsers.Items.Count; i++)
                {
                    for (int y = 0; y < cbxDbUsers.Items.Count; y++)
                    {
                        if (y != i && cbxDbUsers.Items[i].ToString() == cbxDbUsers.Items[y].ToString())
                        {
                            cbxDbUsers.Items.RemoveAt(i);
                            break;
                        }
                    }
                }
                connect.Close();
            }
            catch (Exception ex)
            {
                logger.Error("HATA SQL database user listeleme işlemi başarısız! : " + ex.Message + "");
                MessageBox.Show("HATA SQL database user listeleme işlemi başarısız! : " + ex.Message + "", "BİLGİ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void GetSQLDatabaseList(string getConString, ComboBox[] comboBoxDatabase)
        {
            try
            {
                SqlConnection connect = new SqlConnection(getConString);
                connect.Open();
                SqlCommand cmd = new SqlCommand("SELECT name FROM master.dbo.sysdatabases", connect);
                SqlDataReader DR = cmd.ExecuteReader();

                while (DR.Read())
                {
                    foreach (var cbxItem in comboBoxDatabase)
                    {
                        cbxItem.Items.Add(DR[0]);
                    }
                }
                connect.Close();
                //MessageBox.Show("SQL database listeleme işlemi başarıyla gerçekleşti.", "BİLGİ", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                logger.Error("HATA SQL database listeleme işlemi başarısız! : " + ex.Message + "");

                MessageBox.Show("HATA SQL database listeleme işlemi başarısız! : " + ex.Message + "", "BİLGİ", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }


    }
}
